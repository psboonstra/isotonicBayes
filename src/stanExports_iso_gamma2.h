// Generated by rstantools.  Do not edit by hand.

/*
    isotonicBayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    isotonicBayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with isotonicBayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_iso_gamma2_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_iso_gamma2");
    reader.add_event(34, 32, "end", "model_iso_gamma2");
    return reader;
}
#include <stan_meta_header.hpp>
class model_iso_gamma2
  : public stan::model::model_base_crtp<model_iso_gamma2> {
private:
        int n_groups_stan;
        std::vector<int> n_per_group_stan;
        std::vector<int> y_stan;
        double alpha_shape_stan;
        double tiny_positive_stan;
        int only_prior_stan;
        double scaled_tiny_positive_stan;
public:
    model_iso_gamma2(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_iso_gamma2(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_iso_gamma2_namespace::model_iso_gamma2";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_groups_stan", "int", context__.to_vec());
            n_groups_stan = int(0);
            vals_i__ = context__.vals_i("n_groups_stan");
            pos__ = 0;
            n_groups_stan = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_groups_stan", n_groups_stan, 1);
            current_statement_begin__ = 4;
            validate_non_negative_index("n_per_group_stan", "n_groups_stan", n_groups_stan);
            context__.validate_dims("data initialization", "n_per_group_stan", "int", context__.to_vec(n_groups_stan));
            n_per_group_stan = std::vector<int>(n_groups_stan, int(0));
            vals_i__ = context__.vals_i("n_per_group_stan");
            pos__ = 0;
            size_t n_per_group_stan_k_0_max__ = n_groups_stan;
            for (size_t k_0__ = 0; k_0__ < n_per_group_stan_k_0_max__; ++k_0__) {
                n_per_group_stan[k_0__] = vals_i__[pos__++];
            }
            size_t n_per_group_stan_i_0_max__ = n_groups_stan;
            for (size_t i_0__ = 0; i_0__ < n_per_group_stan_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_per_group_stan[i_0__]", n_per_group_stan[i_0__], 0);
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("y_stan", "n_groups_stan", n_groups_stan);
            context__.validate_dims("data initialization", "y_stan", "int", context__.to_vec(n_groups_stan));
            y_stan = std::vector<int>(n_groups_stan, int(0));
            vals_i__ = context__.vals_i("y_stan");
            pos__ = 0;
            size_t y_stan_k_0_max__ = n_groups_stan;
            for (size_t k_0__ = 0; k_0__ < y_stan_k_0_max__; ++k_0__) {
                y_stan[k_0__] = vals_i__[pos__++];
            }
            size_t y_stan_i_0_max__ = n_groups_stan;
            for (size_t i_0__ = 0; i_0__ < y_stan_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y_stan[i_0__]", y_stan[i_0__], 0);
                check_less_or_equal(function__, "y_stan[i_0__]", y_stan[i_0__], max(n_per_group_stan));
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "alpha_shape_stan", "double", context__.to_vec());
            alpha_shape_stan = double(0);
            vals_r__ = context__.vals_r("alpha_shape_stan");
            pos__ = 0;
            alpha_shape_stan = vals_r__[pos__++];
            check_greater_or_equal(function__, "alpha_shape_stan", alpha_shape_stan, 0);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "tiny_positive_stan", "double", context__.to_vec());
            tiny_positive_stan = double(0);
            vals_r__ = context__.vals_r("tiny_positive_stan");
            pos__ = 0;
            tiny_positive_stan = vals_r__[pos__++];
            check_greater_or_equal(function__, "tiny_positive_stan", tiny_positive_stan, 0);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "only_prior_stan", "int", context__.to_vec());
            only_prior_stan = int(0);
            vals_i__ = context__.vals_i("only_prior_stan");
            pos__ = 0;
            only_prior_stan = vals_i__[pos__++];
            check_greater_or_equal(function__, "only_prior_stan", only_prior_stan, 0);
            check_less_or_equal(function__, "only_prior_stan", only_prior_stan, 1);
            // initialize transformed data variables
            current_statement_begin__ = 11;
            scaled_tiny_positive_stan = double(0);
            stan::math::fill(scaled_tiny_positive_stan, DUMMY_VAR__);
            stan::math::assign(scaled_tiny_positive_stan,((n_groups_stan + 1) * tiny_positive_stan));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 14;
            validate_non_negative_index("alpha", "(n_groups_stan + 1)", (n_groups_stan + 1));
            num_params_r__ += (n_groups_stan + 1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_iso_gamma2() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 14;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "(n_groups_stan + 1)", (n_groups_stan + 1));
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec((n_groups_stan + 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha((n_groups_stan + 1));
        size_t alpha_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(tiny_positive_stan, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 14;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_lb_constrain(tiny_positive_stan, (n_groups_stan + 1), lp__);
            else
                alpha = in__.vector_lb_constrain(tiny_positive_stan, (n_groups_stan + 1));
            // transformed parameters
            current_statement_begin__ = 17;
            validate_non_negative_index("xi", "n_groups_stan", n_groups_stan);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> xi(n_groups_stan);
            stan::math::initialize(xi, DUMMY_VAR__);
            stan::math::fill(xi, DUMMY_VAR__);
            current_statement_begin__ = 18;
            local_scalar_t__ sum_alpha;
            (void) sum_alpha;  // dummy to suppress unused var warning
            stan::math::initialize(sum_alpha, DUMMY_VAR__);
            stan::math::fill(sum_alpha, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 19;
            stan::math::assign(sum_alpha, (scaled_tiny_positive_stan + sum(alpha)));
            current_statement_begin__ = 20;
            stan::model::assign(xi, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        (get_base1(alpha, 1, "alpha", 1) / sum_alpha), 
                        "assigning variable xi");
            current_statement_begin__ = 21;
            if (as_bool(logical_gt(n_groups_stan, 1))) {
                current_statement_begin__ = 22;
                for (int i = 2; i <= n_groups_stan; ++i) {
                    current_statement_begin__ = 23;
                    stan::model::assign(xi, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(xi, (i - 1), "xi", 1) + (get_base1(alpha, i, "alpha", 1) / sum_alpha)), 
                                "assigning variable xi");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 17;
            size_t xi_j_1_max__ = n_groups_stan;
            for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(xi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: xi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable xi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "xi", xi, 0.0);
            check_less_or_equal(function__, "xi", xi, 1.0);
            current_statement_begin__ = 18;
            if (stan::math::is_uninitialized(sum_alpha)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sum_alpha";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sum_alpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "sum_alpha", sum_alpha, scaled_tiny_positive_stan);
            // model body
            current_statement_begin__ = 28;
            lp_accum__.add(gamma_log<propto__>(alpha, alpha_shape_stan, 1.0));
            current_statement_begin__ = 29;
            if (as_bool(logical_eq(only_prior_stan, 0))) {
                current_statement_begin__ = 30;
                lp_accum__.add(binomial_log<propto__>(y_stan, n_per_group_stan, xi));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("xi");
        names__.push_back("sum_alpha");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((n_groups_stan + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups_stan);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_iso_gamma2_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_lb_constrain(tiny_positive_stan, (n_groups_stan + 1));
        size_t alpha_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 17;
            validate_non_negative_index("xi", "n_groups_stan", n_groups_stan);
            Eigen::Matrix<double, Eigen::Dynamic, 1> xi(n_groups_stan);
            stan::math::initialize(xi, DUMMY_VAR__);
            stan::math::fill(xi, DUMMY_VAR__);
            current_statement_begin__ = 18;
            double sum_alpha;
            (void) sum_alpha;  // dummy to suppress unused var warning
            stan::math::initialize(sum_alpha, DUMMY_VAR__);
            stan::math::fill(sum_alpha, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 19;
            stan::math::assign(sum_alpha, (scaled_tiny_positive_stan + sum(alpha)));
            current_statement_begin__ = 20;
            stan::model::assign(xi, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        (get_base1(alpha, 1, "alpha", 1) / sum_alpha), 
                        "assigning variable xi");
            current_statement_begin__ = 21;
            if (as_bool(logical_gt(n_groups_stan, 1))) {
                current_statement_begin__ = 22;
                for (int i = 2; i <= n_groups_stan; ++i) {
                    current_statement_begin__ = 23;
                    stan::model::assign(xi, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(xi, (i - 1), "xi", 1) + (get_base1(alpha, i, "alpha", 1) / sum_alpha)), 
                                "assigning variable xi");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 17;
            check_greater_or_equal(function__, "xi", xi, 0.0);
            check_less_or_equal(function__, "xi", xi, 1.0);
            current_statement_begin__ = 18;
            check_greater_or_equal(function__, "sum_alpha", sum_alpha, scaled_tiny_positive_stan);
            // write transformed parameters
            if (include_tparams__) {
                size_t xi_j_1_max__ = n_groups_stan;
                for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
                    vars__.push_back(xi(j_1__));
                }
                vars__.push_back(sum_alpha);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_iso_gamma2";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t xi_j_1_max__ = n_groups_stan;
            for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "sum_alpha";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t xi_j_1_max__ = n_groups_stan;
            for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "sum_alpha";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_iso_gamma2_namespace::model_iso_gamma2 stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
