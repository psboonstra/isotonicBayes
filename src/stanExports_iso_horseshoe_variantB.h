// Generated by rstantools.  Do not edit by hand.

/*
    isotonicBayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    isotonicBayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with isotonicBayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_iso_horseshoe_variantB_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_iso_horseshoe_variantB");
    reader.add_event(72, 70, "end", "model_iso_horseshoe_variantB");
    return reader;
}
#include <stan_meta_header.hpp>
class model_iso_horseshoe_variantB
  : public stan::model::model_base_crtp<model_iso_horseshoe_variantB> {
private:
        int n_groups_stan;
        std::vector<int> n_per_group_stan;
        std::vector<int> y_stan;
        double local_dof_stan;
        double global_dof_stan;
        double alpha_scale_stan;
        double slab_precision_stan;
        int only_prior_stan;
        double small_number;
        double alpha_scale_stan_sq;
public:
    model_iso_horseshoe_variantB(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_iso_horseshoe_variantB(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_iso_horseshoe_variantB_namespace::model_iso_horseshoe_variantB";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_groups_stan", "int", context__.to_vec());
            n_groups_stan = int(0);
            vals_i__ = context__.vals_i("n_groups_stan");
            pos__ = 0;
            n_groups_stan = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_groups_stan", n_groups_stan, 1);
            current_statement_begin__ = 7;
            validate_non_negative_index("n_per_group_stan", "n_groups_stan", n_groups_stan);
            context__.validate_dims("data initialization", "n_per_group_stan", "int", context__.to_vec(n_groups_stan));
            n_per_group_stan = std::vector<int>(n_groups_stan, int(0));
            vals_i__ = context__.vals_i("n_per_group_stan");
            pos__ = 0;
            size_t n_per_group_stan_k_0_max__ = n_groups_stan;
            for (size_t k_0__ = 0; k_0__ < n_per_group_stan_k_0_max__; ++k_0__) {
                n_per_group_stan[k_0__] = vals_i__[pos__++];
            }
            size_t n_per_group_stan_i_0_max__ = n_groups_stan;
            for (size_t i_0__ = 0; i_0__ < n_per_group_stan_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_per_group_stan[i_0__]", n_per_group_stan[i_0__], 0);
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("y_stan", "n_groups_stan", n_groups_stan);
            context__.validate_dims("data initialization", "y_stan", "int", context__.to_vec(n_groups_stan));
            y_stan = std::vector<int>(n_groups_stan, int(0));
            vals_i__ = context__.vals_i("y_stan");
            pos__ = 0;
            size_t y_stan_k_0_max__ = n_groups_stan;
            for (size_t k_0__ = 0; k_0__ < y_stan_k_0_max__; ++k_0__) {
                y_stan[k_0__] = vals_i__[pos__++];
            }
            size_t y_stan_i_0_max__ = n_groups_stan;
            for (size_t i_0__ = 0; i_0__ < y_stan_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y_stan[i_0__]", y_stan[i_0__], 0);
                check_less_or_equal(function__, "y_stan[i_0__]", y_stan[i_0__], max(n_per_group_stan));
            }
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "local_dof_stan", "double", context__.to_vec());
            local_dof_stan = double(0);
            vals_r__ = context__.vals_r("local_dof_stan");
            pos__ = 0;
            local_dof_stan = vals_r__[pos__++];
            check_greater_or_equal(function__, "local_dof_stan", local_dof_stan, 0);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "global_dof_stan", "double", context__.to_vec());
            global_dof_stan = double(0);
            vals_r__ = context__.vals_r("global_dof_stan");
            pos__ = 0;
            global_dof_stan = vals_r__[pos__++];
            check_greater_or_equal(function__, "global_dof_stan", global_dof_stan, 0);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "alpha_scale_stan", "double", context__.to_vec());
            alpha_scale_stan = double(0);
            vals_r__ = context__.vals_r("alpha_scale_stan");
            pos__ = 0;
            alpha_scale_stan = vals_r__[pos__++];
            check_greater_or_equal(function__, "alpha_scale_stan", alpha_scale_stan, 0);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "slab_precision_stan", "double", context__.to_vec());
            slab_precision_stan = double(0);
            vals_r__ = context__.vals_r("slab_precision_stan");
            pos__ = 0;
            slab_precision_stan = vals_r__[pos__++];
            check_greater_or_equal(function__, "slab_precision_stan", slab_precision_stan, 0);
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "only_prior_stan", "int", context__.to_vec());
            only_prior_stan = int(0);
            vals_i__ = context__.vals_i("only_prior_stan");
            pos__ = 0;
            only_prior_stan = vals_i__[pos__++];
            check_greater_or_equal(function__, "only_prior_stan", only_prior_stan, 0);
            check_less_or_equal(function__, "only_prior_stan", only_prior_stan, 1);
            // initialize transformed data variables
            current_statement_begin__ = 16;
            small_number = double(0);
            stan::math::fill(small_number, DUMMY_VAR__);
            stan::math::assign(small_number,pow(stan::math::machine_precision(), 0.5));
            current_statement_begin__ = 17;
            alpha_scale_stan_sq = double(0);
            stan::math::fill(alpha_scale_stan_sq, DUMMY_VAR__);
            stan::math::assign(alpha_scale_stan_sq,square(alpha_scale_stan));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 20;
            validate_non_negative_index("alpha_raw", "(n_groups_stan + 1)", (n_groups_stan + 1));
            num_params_r__ += (n_groups_stan + 1);
            current_statement_begin__ = 22;
            num_params_r__ += 1;
            current_statement_begin__ = 23;
            num_params_r__ += 1;
            current_statement_begin__ = 25;
            validate_non_negative_index("lambda_base_sq", "(n_groups_stan + 1)", (n_groups_stan + 1));
            num_params_r__ += (n_groups_stan + 1);
            current_statement_begin__ = 26;
            validate_non_negative_index("lambda_scale_sq", "(n_groups_stan + 1)", (n_groups_stan + 1));
            num_params_r__ += (n_groups_stan + 1);
            current_statement_begin__ = 28;
            validate_non_negative_index("gamma_base_sq", "2", 2);
            num_params_r__ += 2;
            current_statement_begin__ = 29;
            validate_non_negative_index("gamma_scale_sq", "2", 2);
            num_params_r__ += 2;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_iso_horseshoe_variantB() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 20;
        if (!(context__.contains_r("alpha_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_raw");
        pos__ = 0U;
        validate_non_negative_index("alpha_raw", "(n_groups_stan + 1)", (n_groups_stan + 1));
        context__.validate_dims("parameter initialization", "alpha_raw", "vector_d", context__.to_vec((n_groups_stan + 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_raw((n_groups_stan + 1));
        size_t alpha_raw_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            alpha_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0.0, alpha_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("tau_base_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_base_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_base_sq");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_base_sq", "double", context__.to_vec());
        double tau_base_sq(0);
        tau_base_sq = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, tau_base_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_base_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("tau_scale_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_scale_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_scale_sq");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_scale_sq", "double", context__.to_vec());
        double tau_scale_sq(0);
        tau_scale_sq = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, tau_scale_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_scale_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("lambda_base_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_base_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_base_sq");
        pos__ = 0U;
        validate_non_negative_index("lambda_base_sq", "(n_groups_stan + 1)", (n_groups_stan + 1));
        context__.validate_dims("parameter initialization", "lambda_base_sq", "vector_d", context__.to_vec((n_groups_stan + 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_base_sq((n_groups_stan + 1));
        size_t lambda_base_sq_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < lambda_base_sq_j_1_max__; ++j_1__) {
            lambda_base_sq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0.0, lambda_base_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_base_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("lambda_scale_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_scale_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_scale_sq");
        pos__ = 0U;
        validate_non_negative_index("lambda_scale_sq", "(n_groups_stan + 1)", (n_groups_stan + 1));
        context__.validate_dims("parameter initialization", "lambda_scale_sq", "vector_d", context__.to_vec((n_groups_stan + 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_scale_sq((n_groups_stan + 1));
        size_t lambda_scale_sq_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < lambda_scale_sq_j_1_max__; ++j_1__) {
            lambda_scale_sq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0.0, lambda_scale_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_scale_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("gamma_base_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_base_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_base_sq");
        pos__ = 0U;
        validate_non_negative_index("gamma_base_sq", "2", 2);
        context__.validate_dims("parameter initialization", "gamma_base_sq", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_base_sq(2);
        size_t gamma_base_sq_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < gamma_base_sq_j_1_max__; ++j_1__) {
            gamma_base_sq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0.0, gamma_base_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_base_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("gamma_scale_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_scale_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_scale_sq");
        pos__ = 0U;
        validate_non_negative_index("gamma_scale_sq", "2", 2);
        context__.validate_dims("parameter initialization", "gamma_scale_sq", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_scale_sq(2);
        size_t gamma_scale_sq_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < gamma_scale_sq_j_1_max__; ++j_1__) {
            gamma_scale_sq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0.0, gamma_scale_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_scale_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 20;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_raw;
            (void) alpha_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_raw = in__.vector_lb_constrain(0.0, (n_groups_stan + 1), lp__);
            else
                alpha_raw = in__.vector_lb_constrain(0.0, (n_groups_stan + 1));
            current_statement_begin__ = 22;
            local_scalar_t__ tau_base_sq;
            (void) tau_base_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_base_sq = in__.scalar_lb_constrain(0.0, lp__);
            else
                tau_base_sq = in__.scalar_lb_constrain(0.0);
            current_statement_begin__ = 23;
            local_scalar_t__ tau_scale_sq;
            (void) tau_scale_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_scale_sq = in__.scalar_lb_constrain(0.0, lp__);
            else
                tau_scale_sq = in__.scalar_lb_constrain(0.0);
            current_statement_begin__ = 25;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_base_sq;
            (void) lambda_base_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_base_sq = in__.vector_lb_constrain(0.0, (n_groups_stan + 1), lp__);
            else
                lambda_base_sq = in__.vector_lb_constrain(0.0, (n_groups_stan + 1));
            current_statement_begin__ = 26;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_scale_sq;
            (void) lambda_scale_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_scale_sq = in__.vector_lb_constrain(0.0, (n_groups_stan + 1), lp__);
            else
                lambda_scale_sq = in__.vector_lb_constrain(0.0, (n_groups_stan + 1));
            current_statement_begin__ = 28;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_base_sq;
            (void) gamma_base_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma_base_sq = in__.vector_lb_constrain(0.0, 2, lp__);
            else
                gamma_base_sq = in__.vector_lb_constrain(0.0, 2);
            current_statement_begin__ = 29;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_scale_sq;
            (void) gamma_scale_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma_scale_sq = in__.vector_lb_constrain(0.0, 2, lp__);
            else
                gamma_scale_sq = in__.vector_lb_constrain(0.0, 2);
            // transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("xi", "n_groups_stan", n_groups_stan);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> xi(n_groups_stan);
            stan::math::initialize(xi, DUMMY_VAR__);
            stan::math::fill(xi, DUMMY_VAR__);
            current_statement_begin__ = 33;
            validate_non_negative_index("theta", "(n_groups_stan + 1)", (n_groups_stan + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta((n_groups_stan + 1));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("alpha", "(n_groups_stan + 1)", (n_groups_stan + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha((n_groups_stan + 1));
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 35;
            local_scalar_t__ tau_sq;
            (void) tau_sq;  // dummy to suppress unused var warning
            stan::math::initialize(tau_sq, DUMMY_VAR__);
            stan::math::fill(tau_sq, DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("lambda_sq", "(n_groups_stan + 1)", (n_groups_stan + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_sq((n_groups_stan + 1));
            stan::math::initialize(lambda_sq, DUMMY_VAR__);
            stan::math::fill(lambda_sq, DUMMY_VAR__);
            current_statement_begin__ = 37;
            validate_non_negative_index("gamma_sq", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_sq(2);
            stan::math::initialize(gamma_sq, DUMMY_VAR__);
            stan::math::fill(gamma_sq, DUMMY_VAR__);
            current_statement_begin__ = 38;
            validate_non_negative_index("normalized_alpha", "(n_groups_stan + 1)", (n_groups_stan + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> normalized_alpha((n_groups_stan + 1));
            stan::math::initialize(normalized_alpha, DUMMY_VAR__);
            stan::math::fill(normalized_alpha, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 39;
            stan::math::assign(tau_sq, (tau_base_sq * tau_scale_sq));
            current_statement_begin__ = 40;
            stan::math::assign(lambda_sq, elt_multiply(lambda_base_sq, lambda_scale_sq));
            current_statement_begin__ = 41;
            stan::math::assign(gamma_sq, elt_multiply(gamma_base_sq, gamma_scale_sq));
            current_statement_begin__ = 42;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        (1.0 / stan::math::sqrt((slab_precision_stan + (1.0 / (get_base1(gamma_sq, 1, "gamma_sq", 1) * get_base1(lambda_sq, 1, "lambda_sq", 1)))))), 
                        "assigning variable theta");
            current_statement_begin__ = 43;
            if (as_bool(logical_gt(n_groups_stan, 1))) {
                current_statement_begin__ = 44;
                for (int i = 2; i <= n_groups_stan; ++i) {
                    current_statement_begin__ = 45;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (1.0 / stan::math::sqrt((slab_precision_stan + (1.0 / ((alpha_scale_stan_sq * tau_sq) * get_base1(lambda_sq, i, "lambda_sq", 1)))))), 
                                "assigning variable theta");
                }
            }
            current_statement_begin__ = 48;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni((n_groups_stan + 1)), stan::model::nil_index_list()), 
                        (1.0 / stan::math::sqrt((slab_precision_stan + (1.0 / (get_base1(gamma_sq, 2, "gamma_sq", 1) * get_base1(lambda_sq, (n_groups_stan + 1), "lambda_sq", 1)))))), 
                        "assigning variable theta");
            current_statement_begin__ = 49;
            stan::math::assign(alpha, elt_multiply(theta, alpha_raw));
            current_statement_begin__ = 50;
            stan::math::assign(normalized_alpha, divide(alpha, sum(alpha)));
            current_statement_begin__ = 51;
            stan::model::assign(xi, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(normalized_alpha, 1, "normalized_alpha", 1), 
                        "assigning variable xi");
            current_statement_begin__ = 52;
            if (as_bool(logical_gt(n_groups_stan, 1))) {
                current_statement_begin__ = 53;
                for (int i = 2; i <= n_groups_stan; ++i) {
                    current_statement_begin__ = 54;
                    stan::model::assign(xi, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(xi, (i - 1), "xi", 1) + get_base1(normalized_alpha, i, "normalized_alpha", 1)), 
                                "assigning variable xi");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 32;
            size_t xi_j_1_max__ = n_groups_stan;
            for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(xi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: xi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable xi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "xi", xi, 0.0);
            check_less_or_equal(function__, "xi", xi, 1.0);
            current_statement_begin__ = 33;
            size_t theta_j_1_max__ = (n_groups_stan + 1);
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "theta", theta, 0.0);
            check_less_or_equal(function__, "theta", theta, 1.0);
            current_statement_begin__ = 34;
            size_t alpha_j_1_max__ = (n_groups_stan + 1);
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(alpha(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "alpha", alpha, 0.0);
            current_statement_begin__ = 35;
            if (stan::math::is_uninitialized(tau_sq)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: tau_sq";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tau_sq: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "tau_sq", tau_sq, 0.0);
            current_statement_begin__ = 36;
            size_t lambda_sq_j_1_max__ = (n_groups_stan + 1);
            for (size_t j_1__ = 0; j_1__ < lambda_sq_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda_sq(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_sq" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_sq: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "lambda_sq", lambda_sq, 0.0);
            current_statement_begin__ = 37;
            size_t gamma_sq_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < gamma_sq_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(gamma_sq(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gamma_sq" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable gamma_sq: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "gamma_sq", gamma_sq, 0.0);
            current_statement_begin__ = 38;
            size_t normalized_alpha_j_1_max__ = (n_groups_stan + 1);
            for (size_t j_1__ = 0; j_1__ < normalized_alpha_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(normalized_alpha(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: normalized_alpha" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable normalized_alpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "normalized_alpha", normalized_alpha, 0.0);
            check_less_or_equal(function__, "normalized_alpha", normalized_alpha, 1.0);
            // model body
            current_statement_begin__ = 59;
            lp_accum__.add(normal_log<propto__>(alpha_raw, 0.0, 1.0));
            current_statement_begin__ = 60;
            lp_accum__.add(chi_square_log<propto__>(tau_base_sq, 1.0));
            current_statement_begin__ = 61;
            lp_accum__.add(inv_gamma_log<propto__>(tau_scale_sq, (global_dof_stan / 2.0), (global_dof_stan / 2.0)));
            current_statement_begin__ = 62;
            lp_accum__.add(chi_square_log<propto__>(lambda_base_sq, 1.0));
            current_statement_begin__ = 63;
            lp_accum__.add(inv_gamma_log<propto__>(lambda_scale_sq, (local_dof_stan / 2.0), (local_dof_stan / 2.0)));
            current_statement_begin__ = 64;
            lp_accum__.add(chi_square_log<propto__>(gamma_base_sq, 1.0));
            current_statement_begin__ = 65;
            lp_accum__.add(inv_gamma_log<propto__>(gamma_scale_sq, (local_dof_stan / 2.0), (local_dof_stan / 2.0)));
            current_statement_begin__ = 66;
            if (as_bool(logical_eq(only_prior_stan, 0))) {
                current_statement_begin__ = 67;
                lp_accum__.add(binomial_log<propto__>(y_stan, n_per_group_stan, xi));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha_raw");
        names__.push_back("tau_base_sq");
        names__.push_back("tau_scale_sq");
        names__.push_back("lambda_base_sq");
        names__.push_back("lambda_scale_sq");
        names__.push_back("gamma_base_sq");
        names__.push_back("gamma_scale_sq");
        names__.push_back("xi");
        names__.push_back("theta");
        names__.push_back("alpha");
        names__.push_back("tau_sq");
        names__.push_back("lambda_sq");
        names__.push_back("gamma_sq");
        names__.push_back("normalized_alpha");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((n_groups_stan + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_groups_stan + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_groups_stan + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups_stan);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_groups_stan + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_groups_stan + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_groups_stan + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_groups_stan + 1));
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_iso_horseshoe_variantB_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_raw = in__.vector_lb_constrain(0.0, (n_groups_stan + 1));
        size_t alpha_raw_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            vars__.push_back(alpha_raw(j_1__));
        }
        double tau_base_sq = in__.scalar_lb_constrain(0.0);
        vars__.push_back(tau_base_sq);
        double tau_scale_sq = in__.scalar_lb_constrain(0.0);
        vars__.push_back(tau_scale_sq);
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_base_sq = in__.vector_lb_constrain(0.0, (n_groups_stan + 1));
        size_t lambda_base_sq_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < lambda_base_sq_j_1_max__; ++j_1__) {
            vars__.push_back(lambda_base_sq(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_scale_sq = in__.vector_lb_constrain(0.0, (n_groups_stan + 1));
        size_t lambda_scale_sq_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < lambda_scale_sq_j_1_max__; ++j_1__) {
            vars__.push_back(lambda_scale_sq(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_base_sq = in__.vector_lb_constrain(0.0, 2);
        size_t gamma_base_sq_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < gamma_base_sq_j_1_max__; ++j_1__) {
            vars__.push_back(gamma_base_sq(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_scale_sq = in__.vector_lb_constrain(0.0, 2);
        size_t gamma_scale_sq_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < gamma_scale_sq_j_1_max__; ++j_1__) {
            vars__.push_back(gamma_scale_sq(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("xi", "n_groups_stan", n_groups_stan);
            Eigen::Matrix<double, Eigen::Dynamic, 1> xi(n_groups_stan);
            stan::math::initialize(xi, DUMMY_VAR__);
            stan::math::fill(xi, DUMMY_VAR__);
            current_statement_begin__ = 33;
            validate_non_negative_index("theta", "(n_groups_stan + 1)", (n_groups_stan + 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta((n_groups_stan + 1));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("alpha", "(n_groups_stan + 1)", (n_groups_stan + 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha((n_groups_stan + 1));
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 35;
            double tau_sq;
            (void) tau_sq;  // dummy to suppress unused var warning
            stan::math::initialize(tau_sq, DUMMY_VAR__);
            stan::math::fill(tau_sq, DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("lambda_sq", "(n_groups_stan + 1)", (n_groups_stan + 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_sq((n_groups_stan + 1));
            stan::math::initialize(lambda_sq, DUMMY_VAR__);
            stan::math::fill(lambda_sq, DUMMY_VAR__);
            current_statement_begin__ = 37;
            validate_non_negative_index("gamma_sq", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_sq(2);
            stan::math::initialize(gamma_sq, DUMMY_VAR__);
            stan::math::fill(gamma_sq, DUMMY_VAR__);
            current_statement_begin__ = 38;
            validate_non_negative_index("normalized_alpha", "(n_groups_stan + 1)", (n_groups_stan + 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> normalized_alpha((n_groups_stan + 1));
            stan::math::initialize(normalized_alpha, DUMMY_VAR__);
            stan::math::fill(normalized_alpha, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 39;
            stan::math::assign(tau_sq, (tau_base_sq * tau_scale_sq));
            current_statement_begin__ = 40;
            stan::math::assign(lambda_sq, elt_multiply(lambda_base_sq, lambda_scale_sq));
            current_statement_begin__ = 41;
            stan::math::assign(gamma_sq, elt_multiply(gamma_base_sq, gamma_scale_sq));
            current_statement_begin__ = 42;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        (1.0 / stan::math::sqrt((slab_precision_stan + (1.0 / (get_base1(gamma_sq, 1, "gamma_sq", 1) * get_base1(lambda_sq, 1, "lambda_sq", 1)))))), 
                        "assigning variable theta");
            current_statement_begin__ = 43;
            if (as_bool(logical_gt(n_groups_stan, 1))) {
                current_statement_begin__ = 44;
                for (int i = 2; i <= n_groups_stan; ++i) {
                    current_statement_begin__ = 45;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (1.0 / stan::math::sqrt((slab_precision_stan + (1.0 / ((alpha_scale_stan_sq * tau_sq) * get_base1(lambda_sq, i, "lambda_sq", 1)))))), 
                                "assigning variable theta");
                }
            }
            current_statement_begin__ = 48;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni((n_groups_stan + 1)), stan::model::nil_index_list()), 
                        (1.0 / stan::math::sqrt((slab_precision_stan + (1.0 / (get_base1(gamma_sq, 2, "gamma_sq", 1) * get_base1(lambda_sq, (n_groups_stan + 1), "lambda_sq", 1)))))), 
                        "assigning variable theta");
            current_statement_begin__ = 49;
            stan::math::assign(alpha, elt_multiply(theta, alpha_raw));
            current_statement_begin__ = 50;
            stan::math::assign(normalized_alpha, divide(alpha, sum(alpha)));
            current_statement_begin__ = 51;
            stan::model::assign(xi, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(normalized_alpha, 1, "normalized_alpha", 1), 
                        "assigning variable xi");
            current_statement_begin__ = 52;
            if (as_bool(logical_gt(n_groups_stan, 1))) {
                current_statement_begin__ = 53;
                for (int i = 2; i <= n_groups_stan; ++i) {
                    current_statement_begin__ = 54;
                    stan::model::assign(xi, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(xi, (i - 1), "xi", 1) + get_base1(normalized_alpha, i, "normalized_alpha", 1)), 
                                "assigning variable xi");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 32;
            check_greater_or_equal(function__, "xi", xi, 0.0);
            check_less_or_equal(function__, "xi", xi, 1.0);
            current_statement_begin__ = 33;
            check_greater_or_equal(function__, "theta", theta, 0.0);
            check_less_or_equal(function__, "theta", theta, 1.0);
            current_statement_begin__ = 34;
            check_greater_or_equal(function__, "alpha", alpha, 0.0);
            current_statement_begin__ = 35;
            check_greater_or_equal(function__, "tau_sq", tau_sq, 0.0);
            current_statement_begin__ = 36;
            check_greater_or_equal(function__, "lambda_sq", lambda_sq, 0.0);
            current_statement_begin__ = 37;
            check_greater_or_equal(function__, "gamma_sq", gamma_sq, 0.0);
            current_statement_begin__ = 38;
            check_greater_or_equal(function__, "normalized_alpha", normalized_alpha, 0.0);
            check_less_or_equal(function__, "normalized_alpha", normalized_alpha, 1.0);
            // write transformed parameters
            if (include_tparams__) {
                size_t xi_j_1_max__ = n_groups_stan;
                for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
                    vars__.push_back(xi(j_1__));
                }
                size_t theta_j_1_max__ = (n_groups_stan + 1);
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    vars__.push_back(theta(j_1__));
                }
                size_t alpha_j_1_max__ = (n_groups_stan + 1);
                for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                    vars__.push_back(alpha(j_1__));
                }
                vars__.push_back(tau_sq);
                size_t lambda_sq_j_1_max__ = (n_groups_stan + 1);
                for (size_t j_1__ = 0; j_1__ < lambda_sq_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_sq(j_1__));
                }
                size_t gamma_sq_j_1_max__ = 2;
                for (size_t j_1__ = 0; j_1__ < gamma_sq_j_1_max__; ++j_1__) {
                    vars__.push_back(gamma_sq(j_1__));
                }
                size_t normalized_alpha_j_1_max__ = (n_groups_stan + 1);
                for (size_t j_1__ = 0; j_1__ < normalized_alpha_j_1_max__; ++j_1__) {
                    vars__.push_back(normalized_alpha(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_iso_horseshoe_variantB";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_raw_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_base_sq";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_scale_sq";
        param_names__.push_back(param_name_stream__.str());
        size_t lambda_base_sq_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < lambda_base_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_base_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_scale_sq_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < lambda_scale_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_scale_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_base_sq_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < gamma_base_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_base_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_scale_sq_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < gamma_scale_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_scale_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t xi_j_1_max__ = n_groups_stan;
            for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_1_max__ = (n_groups_stan + 1);
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t alpha_j_1_max__ = (n_groups_stan + 1);
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_sq";
            param_names__.push_back(param_name_stream__.str());
            size_t lambda_sq_j_1_max__ = (n_groups_stan + 1);
            for (size_t j_1__ = 0; j_1__ < lambda_sq_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_sq" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t gamma_sq_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < gamma_sq_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_sq" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t normalized_alpha_j_1_max__ = (n_groups_stan + 1);
            for (size_t j_1__ = 0; j_1__ < normalized_alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "normalized_alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_raw_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_base_sq";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_scale_sq";
        param_names__.push_back(param_name_stream__.str());
        size_t lambda_base_sq_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < lambda_base_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_base_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_scale_sq_j_1_max__ = (n_groups_stan + 1);
        for (size_t j_1__ = 0; j_1__ < lambda_scale_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_scale_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_base_sq_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < gamma_base_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_base_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_scale_sq_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < gamma_scale_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_scale_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t xi_j_1_max__ = n_groups_stan;
            for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_1_max__ = (n_groups_stan + 1);
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t alpha_j_1_max__ = (n_groups_stan + 1);
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_sq";
            param_names__.push_back(param_name_stream__.str());
            size_t lambda_sq_j_1_max__ = (n_groups_stan + 1);
            for (size_t j_1__ = 0; j_1__ < lambda_sq_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_sq" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t gamma_sq_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < gamma_sq_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_sq" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t normalized_alpha_j_1_max__ = (n_groups_stan + 1);
            for (size_t j_1__ = 0; j_1__ < normalized_alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "normalized_alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_iso_horseshoe_variantB_namespace::model_iso_horseshoe_variantB stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
